USE DATABASE TAKE_HOME_CHALLENGE;

/*
CALCULATE THE START DATE OF ALL 52 WEEKS IN 2017. 
THIS ASSUMES FULL WEEKS APPLY ONLY, THEREFORE THE FIRST DAY OF THE YEART:01-01-2017 IS COVERED BY 2016 FIGURES
WEEK BEGINS ON MONDAY
*/
WITH weeks_2017 AS (
  SELECT DATEADD('WEEK', ROW_NUMBER() OVER (ORDER BY 0), DATE_TRUNC('WEEK',to_date('2017-01-01'))) AS week
  FROM TABLE(GENERATOR(ROWCOUNT => 52))
),
-- CALCULATE TOP 3 CATEGORIES IN GIVEN MONTH
NOV_BEST_RANK_PRODUCT AS (
  select count(oi.PRODUCT_ID)
  , P.PRODUCT_CATEGORY_NAME
  , SUM(OI.PRICE)
  , row_number() over(order by count(oi.PRODUCT_ID) desc) as ranking
  from ECOMMERCE.ORDERS O
  INNER JOIN ECOMMERCE.ORDER_ITEMS OI ON O.ORDER_ID = OI.ORDER_ID
  INNER JOIN ECOMMERCE.PRODUCTS P ON P.PRODUCT_ID = OI.PRODUCT_ID
  where EXTRACT(YEAR FROM O.ORDER_PURCHASE_TIMESTAMP) = 2017
  and EXTRACT(MONTH FROM O.ORDER_PURCHASE_TIMESTAMP) = 11
  group by P.PRODUCT_CATEGORY_NAME
  ORDER BY 1 DESC
), -- sum of total results -- 498440.43 -- 337213.12 -- 452148.84
-- 
product_result as (
  select DISTINCT P.PRODUCT_CATEGORY_NAME
  , to_date(DATE_TRUNC('WEEK', O.ORDER_PURCHASE_TIMESTAMP)) AS WEEK_START
  , COUNT(OI.PRICE) OVER (ORDER BY WEEK_START asc) AS WEEKLY_RUNNING_COUNT
  , SUM(OI.PRICE) OVER (partition by P.PRODUCT_CATEGORY_NAME ORDER BY WEEK_START asc) AS WEEKLY_RUNNING_TOTAL
  from ECOMMERCE.ORDERS O 
  INNER JOIN ECOMMERCE.ORDER_ITEMS OI ON O.ORDER_ID = OI.ORDER_ID
  INNER JOIN ECOMMERCE.PRODUCTS P ON P.PRODUCT_ID = OI.PRODUCT_ID
  where EXTRACT(YEAR FROM O.ORDER_PURCHASE_TIMESTAMP) = 2017
  order by week_start asc
)
-- HANDLES THE CUMULATIVE SALES OF ALL 3 CATEGORIES
select *
from (
  select w.week 
  , RANK1.PRODUCT_CATEGORY_NAME || ' - Running GMV' AS PRODUCT_CATEGORY
  , COALESCE(COALESCE(RANK1.WEEKLY_RUNNING_TOTAL, lag(RANK1.WEEKLY_RUNNING_TOTAL) IGNORE NULLS OVER (ORDER BY W.WEEK)),0) AS PRODUCT_CUMULATIVE
  from weeks_2017 w
  left outer join (select * from product_result where PRODUCT_CATEGORY_NAME in (SELECT DISTINCT PRODUCT_CATEGORY_NAME FROM NOV_BEST_RANK_PRODUCT WHERE RANKING <= 3)) RANK1 on w.week = RANK1.week_start
) 
PIVOT (
  max(PRODUCT_CUMULATIVE)
  FOR week IN ('2017-01-02', '2017-01-09', '2017-01-16', '2017-01-23', '2017-01-30', '2017-02-06', '2017-02-13', '2017-02-20', '2017-02-27', '2017-03-06', '2017-03-13', '2017-03-20'
               , '2017-03-27', '2017-04-03', '2017-04-10', '2017-04-17', '2017-04-24', '2017-05-01', '2017-05-08', '2017-05-15', '2017-05-22', '2017-05-29', '2017-06-05', '2017-06-12'
               , '2017-06-19', '2017-06-26', '2017-07-03', '2017-07-10', '2017-07-17', '2017-07-24', '2017-07-31', '2017-08-07', '2017-08-14', '2017-08-21', '2017-08-28', '2017-09-04'
               , '2017-09-11', '2017-09-18', '2017-09-25', '2017-10-02', '2017-10-09', '2017-10-16', '2017-10-23', '2017-10-30', '2017-11-06', '2017-11-13', '2017-11-20', '2017-11-27'
               , '2017-12-04', '2017-12-11', '2017-12-18', '2017-12-25')
) as piv

union all
--  GMV GROWTH REQUIRED SEPARATE QUERY AND PIVOT DUE TO THE GROWTH CALCULCATION BREAKING WHEN ALL THE PRODUCT CATEGORIES WERE RETURNED TOGETHER
select *
from (
  select w.week 
  , RANK1.PRODUCT_CATEGORY_NAME || ' - GMV Growth %' AS PRODUCT_CATEGORY
  , ROUND(COALESCE(((RANK1.WEEKLY_RUNNING_TOTAL - lag(RANK1.WEEKLY_RUNNING_TOTAL) IGNORE NULLS OVER (ORDER BY w.week)) / lag(RANK1.WEEKLY_RUNNING_TOTAL) IGNORE NULLS OVER (ORDER BY w.week) ) * 100,0), 2)  AS PROD_GROWTH_PERCENTAGE
  from weeks_2017 w
  left outer join (select * from product_result where PRODUCT_CATEGORY_NAME in (SELECT DISTINCT PRODUCT_CATEGORY_NAME FROM NOV_BEST_RANK_PRODUCT WHERE RANKING = 1)) RANK1 on w.week = RANK1.week_start
  union all
  select w.week 
  , RANK1.PRODUCT_CATEGORY_NAME || ' - GMV Growth %' AS PRODUCT_CATEGORY
  , ROUND(COALESCE(((RANK1.WEEKLY_RUNNING_TOTAL - lag(RANK1.WEEKLY_RUNNING_TOTAL) IGNORE NULLS OVER (ORDER BY w.week)) / lag(RANK1.WEEKLY_RUNNING_TOTAL) IGNORE NULLS OVER (ORDER BY w.week) ) * 100,0), 2)  AS PROD_GROWTH_PERCENTAGE
  from weeks_2017 w
  left outer join (select * from product_result where PRODUCT_CATEGORY_NAME in (SELECT DISTINCT PRODUCT_CATEGORY_NAME FROM NOV_BEST_RANK_PRODUCT WHERE RANKING = 2)) RANK1 on w.week = RANK1.week_start
  union all
  select w.week 
  , COALESCE(RANK1.PRODUCT_CATEGORY_NAME, 'esporte_lazer') || ' - GMV Growth %' AS PRODUCT_CATEGORY
  , ROUND(COALESCE(((RANK1.WEEKLY_RUNNING_TOTAL - lag(RANK1.WEEKLY_RUNNING_TOTAL) IGNORE NULLS OVER (ORDER BY w.week)) / lag(RANK1.WEEKLY_RUNNING_TOTAL) IGNORE NULLS OVER (ORDER BY w.week) ) * 100,0), 2)  AS PROD_GROWTH_PERCENTAGE
  from weeks_2017 w
  left outer join (select * from product_result where PRODUCT_CATEGORY_NAME in (SELECT DISTINCT PRODUCT_CATEGORY_NAME FROM NOV_BEST_RANK_PRODUCT WHERE RANKING = 3)) RANK1 on w.week = RANK1.week_start
)
PIVOT (
  max(PROD_GROWTH_PERCENTAGE)
  FOR week IN ('2017-01-02', '2017-01-09', '2017-01-16', '2017-01-23', '2017-01-30', '2017-02-06', '2017-02-13', '2017-02-20', '2017-02-27', '2017-03-06', '2017-03-13', '2017-03-20'
               , '2017-03-27', '2017-04-03', '2017-04-10', '2017-04-17', '2017-04-24', '2017-05-01', '2017-05-08', '2017-05-15', '2017-05-22', '2017-05-29', '2017-06-05', '2017-06-12'
               , '2017-06-19', '2017-06-26', '2017-07-03', '2017-07-10', '2017-07-17', '2017-07-24', '2017-07-31', '2017-08-07', '2017-08-14', '2017-08-21', '2017-08-28', '2017-09-04'
               , '2017-09-11', '2017-09-18', '2017-09-25', '2017-10-02', '2017-10-09', '2017-10-16', '2017-10-23', '2017-10-30', '2017-11-06', '2017-11-13', '2017-11-20', '2017-11-27'
               , '2017-12-04', '2017-12-11', '2017-12-18', '2017-12-25')
) as piv

order by PRODUCT_CATEGORY desc

;